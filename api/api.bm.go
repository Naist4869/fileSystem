// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package api is a generated blademaster stub package.
This code was generated with kratos/tool/protobuf/protoc-gen-bm v0.1.

package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

It is generated from these files:
	api.proto
*/
package api

import (
	"context"

	bm "github.com/go-kratos/kratos/pkg/net/http/blademaster"
	"github.com/go-kratos/kratos/pkg/net/http/blademaster/binding"
)
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathFileSystemPing = "/demo.service.v1.FileSystem/Ping"
var PathFileSystemSayHello = "/demo.service.v1.FileSystem/SayHello"
var PathFileSystemSayHelloURL = "/kratos-demo/say_hello"
var PathFileSystemMediaIDGet = "/demo.service.v1.FileSystem/MediaIDGet"

// FileSystemBMServer is the server API for FileSystem service.
type FileSystemBMServer interface {
	Ping(ctx context.Context, req *google_protobuf1.Empty) (resp *google_protobuf1.Empty, err error)

	SayHello(ctx context.Context, req *HelloReq) (resp *google_protobuf1.Empty, err error)

	SayHelloURL(ctx context.Context, req *HelloReq) (resp *HelloResp, err error)

	MediaIDGet(ctx context.Context, req *MediaIDReq) (resp *MediaIDResp, err error)
}

var FileSystemSvc FileSystemBMServer

func fileSystemPing(c *bm.Context) {
	p := new(google_protobuf1.Empty)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FileSystemSvc.Ping(c, p)
	c.JSON(resp, err)
}

func fileSystemSayHello(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FileSystemSvc.SayHello(c, p)
	c.JSON(resp, err)
}

func fileSystemSayHelloURL(c *bm.Context) {
	p := new(HelloReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FileSystemSvc.SayHelloURL(c, p)
	c.JSON(resp, err)
}

func fileSystemMediaIDGet(c *bm.Context) {
	p := new(MediaIDReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := FileSystemSvc.MediaIDGet(c, p)
	c.JSON(resp, err)
}

// RegisterFileSystemBMServer Register the blademaster route
func RegisterFileSystemBMServer(e *bm.Engine, server FileSystemBMServer) {
	FileSystemSvc = server
	e.GET("/demo.service.v1.FileSystem/Ping", fileSystemPing)
	e.GET("/demo.service.v1.FileSystem/SayHello", fileSystemSayHello)
	e.GET("/kratos-demo/say_hello", fileSystemSayHelloURL)
	e.GET("/demo.service.v1.FileSystem/MediaIDGet", fileSystemMediaIDGet)
}
